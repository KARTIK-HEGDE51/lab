// 1.
class Q {
    int n;
    boolean valueset = false;

    synchronized int get() {
        while (!valueset)
            try {
                wait();
            } catch (InterruptedException e) {
                System.out.println("Thread Interrupted");
            }
        System.out.println("Got :" + n);
        valueset = false;
        notify();
        return n;
    }

    synchronized void put(int n) {
        while (valueset)
            try {
                wait();
            } catch (InterruptedException e) {
                System.out.println("Thread interrupted");
            }
        this.n = n;
        valueset = true;
        System.out.println("put " + n);
        notify();
    }
}

class Producer implements Runnable {
    Q q;

    Producer(Q q) {
        this.q = q;
        new Thread(this, "Producer").start();
    }

    public void run() {
        int i = 0;
        while (true) {
            q.put(i++);
        }
    }
}

class Consumer implements Runnable {
    Q q;

    Consumer(Q q) {
        this.q = q;
        new Thread(this, "Consumer").start();
    }

    public void run() {
        int i = 0;
        while (true) {
            q.get();
        }
    }
}

class Demo {
    public static void main(String args[]) {
        Q q = new Q();
        new Producer(q);
        new Consumer(q);
        System.out.println("press ctrl+c to exit");
    }
}

//*********************************************************     2.
import java.awt.Color;
import java.awt.Graphics;

import javax.swing.*;

/*
<applet code="JTabbedPaneDemo" width=400 height=100>
</applet>
*/
public class JTabbedPaneDemo extends JApplet {
    public void init() {
        try {
            SwingUtilities.invokeAndWait(
                    new Runnable() {
                        public void run() {
                            makeGUI();
                        }
                    }
            );
        } catch (Exception exc) {
            System.out.println("Can't create because of " +exc);
        }
    }

    private void makeGUI() {
    	
        JTabbedPane jtp = new JTabbedPane();
        jtp.addTab("Semister", new SemisterPanel());
        jtp.addTab("Course", new CoursePanel());
        jtp.addTab("Elective", new ElectivePanel());
        add(jtp);
    
    }
}

// Make the panels that will be added to the tabbed pane.
class SemisterPanel extends JPanel {
    public SemisterPanel() {
        JButton b1 = new JButton("2");
        add(b1);
        JButton b2 = new JButton("4");
        add(b2);
        JButton b3 = new JButton("6");
        add(b3);
        JButton b4 = new JButton("8");
        add(b4);
        
}
}



class CoursePanel extends JPanel {
    public CoursePanel() {
        JCheckBox cb1 = new JCheckBox("EC");
        add(cb1);
        JCheckBox cb2 = new JCheckBox("ISE");
        add(cb2);
        JCheckBox cb3 = new JCheckBox("CSE");
        add(cb3);
    }
}
class ElectivePanel extends JPanel {
    public ElectivePanel() {
        JComboBox jcb = new JComboBox();
        jcb.addItem("AI");
        jcb.addItem("IoT");
        jcb.addItem("Big Data");
        add(jcb);
    }


}

// ********************************************** 3.
AddServerIntf.java

import java.rmi.*;
public interface AddServerIntf extends Remote {
    int add(int x, int y) throws RemoteException;
}

AddServerImpl.java

import java.rmi.*;
import java.rmi.server.*;
public class AddServerImpl extends UnicastRemoteObject implements AddServerIntf{
    public AddServerImpl() throws RemoteException {}
    public int add(int x, int y) throws RemoteException {
        return x+y;
    }
}

AddServer.java

import java.rmi.*;
public class AddServer {
    public static void main(String[] args) {
        try{
            AddServerImpl server = new AddServerImpl();
            Naming.rebind("registerme",server);
            System.out.println("Server is running...");
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}


AddClient.java
import java.rmi.*;
public class AddClient {
    public static void main(String[] args) {
        try{
            AddServerIntf client = (AddServerIntf)Naming.lookup("registerme");
            System.out.println("First number is :" + args[0]);
            int x = Integer.parseInt(args[0]);
            System.out.println("Second number is :" + args[1]);
            int y = Integer.parseInt(args[1]);
            System.out.println("Sum =" + client.add(x,y));
        } catch (Exception e){
            System.out.println(e);
        }
    }
}

//************************************************************************ 4.
Client.java
import java.net.*;
import java.io.*;
public class Client {
    public static void main(String[] args) {
        Socket client = null;
        BufferedReader br = null;
        try {
            System.out.println(args[0] + " " + args[1]);
            client = new Socket(args[0],Integer.parseInt(args[1]));
        } catch (Exception e){}
        DataInputStream input = null;
        PrintStream output = null;
        try {
            input = new DataInputStream(client.getInputStream());
            output = new PrintStream(client.getOutputStream());
            br = new BufferedReader(new InputStreamReader(System.in));
            String str = input.readLine();  //get the prompt from the server
            System.out.println(str);
            String filename = br.readLine();
            if (filename!=null){
                output.println(filename);
            }
            String data;
            while ((data=input.readLine())!=null) {
                System.out.println(data);
            }
            client.close();
        } catch (Exception e){
            System.out.println(e);
        }
    }
}




Server.java
import java.net.*;
import java.io.*;


public class Server {
    public static void main(String[] args) {
        ServerSocket server = null;
        try {
            server = new ServerSocket(Integer.parseInt(args[0]));
        } catch (Exception e) {
        }
        while (true) {
            Socket client = null;
            PrintStream output = null;
            DataInputStream input = null;
            try {
                client = server.accept();
            } catch (Exception e) {
                System.out.println(e);
            }
            try {
                output = new PrintStream(client.getOutputStream());
                input = new DataInputStream(client.getInputStream());
            } catch (Exception e) {
                System.out.println(e);
            }
            //Send the command prompt to client
            output.println("Enter the filename :>");
            try {
                //get the filename from client
                String filename = input.readLine();
                System.out.println("Client requested file :" + filename);
                try {
                    File f = new File(filename);
                    BufferedReader br = new BufferedReader(new FileReader(f));
                    String data;
                    while ((data = br.readLine()) != null) {
                        output.println(data);
                    }
                } catch (FileNotFoundException e) {
                    output.println("File not found");
                }
                client.close();
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }
}

// ********************************************************************************** 5.
import java.sql.*;
class prg{
public static void main(String args[]){

try{

Class.forName("oracle.jdbc.driver.OracleDriver");

Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","javanetwork","tiger");

Statement stmt=con.createStatement();
String sql1=("insert into Books values(12,'Java Programming','Herbert',9,'TMH')");
String sql2=("update Books set edition=9 where Bid=1432");
String sql3=("Delete from Books where Bid=12345");
String sql=("select * from Books");
ResultSet rs2=stmt.executeQuery(sql1);
ResultSet rs3=stmt.executeQuery(sql2);
ResultSet rs4=stmt.executeQuery(sql3);
ResultSet rs=stmt.executeQuery(sql);


while(rs.next())
{
System.out.println(rs.getInt(1)+ " " +rs.getString(2)+" "+rs.getString(3)+" "+rs.getInt(4)+" "+rs.getString(5) );

}
con.close();

}catch(Exception e)
{

System.out.println(e);
}
}
}

********************************************************** CNIP ***************************************************
// 1.

set ns [ new Simulator ]
set tf [ open lab1.tr w ]
$ns trace-all $tf
set nf [ open lab1.nam w ]
$ns namtrace-all $nf
# The below code is used to create the nodes.
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
#This is used to give color to the flow of packets.
$ns color 1 "red"
$ns color 2 "blue"
$n0 label "Source/udp0"
$n1 label "Source/udp1"
$n2 label "destination"
#providing the link
$ns duplex-link $n0 $n2 10kb 100ms DropTail
$ns duplex-link $n1 $n2 10kb 10ms DropTail
# set the queue size b/w the nodes
$ns set queue-limit $n0 $n2  5
$ns set queue-limit $n1 $n2  5
set udp0   [new Agent/UDP]
set udp1  [new Agent/UDP]
$ns attach-agent $n0 $udp0
$ns attach-agent $n1 $udp1
set cbr0  [new Application/Traffic/CBR]
set cbr1 [new Application/Traffic/CBR]
$cbr0 attach-agent $udp0
$cbr1 attach-agent $udp1
set null0  [new Agent/Null]
$ns attach-agent $n2 $null0
#The below code sets the udp0 packets to red and udp1 packets to blue color
$udp0 set class_  1
$udp1 set class_  2
#The below code is used to connect the agents.
$ns connect $udp0 $null0
$ns connect $udp1 $null0
#The below code is used to set the packet size to 500
$cbr0 set packetSize_  500Mb
$cbr1 set packetSize_  500Mb
#The below code is used to set the interval of the packets,
$cbr0 set interval_ 0.01
$cbr1 set interval_ 0.01
proc finish  { }  {
global  ns n f  tf
$ns flush-trace
exec nam lab1.nam &
close $tf
close $nf
exit 0
}
$ns at 0.1 "$cbr0 start"
$ns at 0.1 "$cbr1 start"
$ns at 9.5 "$cbr0 stop"
$ns at 10.0 "$cbr1 stop"
$ns at 10.0 "finish"
$ns run

AWK Script (lab1.awk)

BEGIN{
count=0; 
} 
{ 
if($1=="d")
count++ ;
} 
END{
printf("The Total no of Packets Dropped due to Congestion : %d\n\n", count) 
} 

*************************************************************************** 2.
set ns  [new Simulator]
set  tf  [open lan.tr w]
$ns trace-all $tf
set nf  [open lan.nam w]
$ns namtrace-all $nf
set n0  [$ns node]
set n1  [$ns node]
set n2  [$ns node]
set n3  [$ns node]
set n4  [$ns node]
set n5  [$ns node]
$ns color 1 "blue"
$n1 label  “Source"
$n2  label  "Error node"
$n5  label  "Destination"

#The below code is used to create two Lans (Lan1 and Lan2).
$ns make-lan "$n0 $n1 $n2" 10Mb 10ms LL Queue/DropTail  Mac/802_3
$ns make-lan "$n3 $n4 $n5" 10Mb 10ms LL Queue/DropTail  Mac/802_3

# connect node n2 and n4
$ns duplex-link $n2 $n4 100Mb 10ms DropTail
$ns duplex-link-op $n2 $n4 color "green"
set udp1 [new Agent/UDP]
$ns attach-agent $n1 $udp1
set cbr1 [new Application/Traffic/CBR]
$cbr1 attach-agent $udp1
set null5 [new Agent/Null]
$ns attach-agent $n5 $null5
$ns connect $udp1 $null5

#data rate- change this to change the data rate
$cbr1 set packetSize_  1000
$cbr1 set interval_  0.001
$udp1 set class_  1

# The below code is used to add an error model between the nodes n2 and n4.
set err  [new ErrorModel]
$ns lossmodel $err $n2 $n4
$err set rate_   0.1
proc finish {}  {
	global ns tf nf
	$ns flush-trace
	exec nam lan.nam&
	close $tf
	close $nf
	exit 0
}
$ns at 0.1 "$cbr1 start"
$ns at 6.0 "finish"
$ns run


AWK Script (lan.awk)
BEGIN{
	pkt=0;
	time=0;
}
{
	if($1=="r"&& $9=="1.0" && $10=="5.0")
	{
		pkt=pkt+$6;
		time=$2;	
	}
}
END{
	printf("Throughput: %f Mbps \n\n",(pkt/time)*(8/1000000));
}

************************************************************************************88 3.
set ns [new Simulator] 
set  tf  [open lab3.tr w] 
$ns trace-all $tf
set nf  [open lab3.nam w] 
$ns namtrace-all $nf
set  n0  [$ns node] 
set  n1  [$ns node] 
set  n2  [$ns node] 
set  n3  [$ns node] 

# The below code is used to set the color and name's to the nodes. 
$ns color 1 "red" 
$ns color 2 "blue" 
$n0 label "Source/TCP" 
$n1 label "Source/UDP" 
$n2 label "Router" 
$n3 label "Destination" 
$ns duplex-link$n0 $n2 100Mb 1ms DropTail
$nsduplex-link $n1 $n2 100Mb 1ms DropTail
$ns duplex-link $n2 $n3 100Mb 1ms DropTail

# The below code is used to set the color and labels to the links. 
$ns duplex-link-op $n0 $n2 color "green" 
$ns duplex-link-op  $n0 $n2 label "from 0-2" 
$ns duplex-link-op  $n1 $n2 color "green" 
$ns duplex-link-op  $n1 $n2 label "from 1-2" 
$ns duplex-link-op  $n2 $n3 color "green" 
$ns duplex-link-op  $n2 $n3 label "from 2-3" 

# The below code is used create TCP and UDP agents and the 
# traffic ftp &cbr respectively. 

set  tcp0 [new Agent/TCP] 
$ns attach-agent $n0 $tcp0 
set ftp0 [new Application/FTP] 
$ftp0 attach-agent $tcp0  
set sink3 [new Agent/TCPSink] 
$ns attach-agent $n3 $sink3 
set udp1 [new Agent/UDP] 
$ns attach-agent $n1 $udp1 
set cbr1 [new Application/Traffic/CBR]
$cbr1 attach-agent $udp1 
set null3 [new Agent/Null] 
$ns attach-agent $n3 $null3 

#The below code is used to set the packet size of ftp and udp. 
$ftp0 set  packetSize_  500
$ftp0 set  interval_  0.001

#The below code is used set the data rate
$cbr1 set  packetSize_  500 
$cbr1 set  interval_  0.001

#This code is used give a color red->tcp and blue ->udp. 
$tcp0 set class_  1
$udp1 set class_  2

# The below code is used connect the agents. 
$ns connect $tcp0 $sink3 
$ns connect $udp1 $null3 

proc finish { } { 
global ns nf tf
$ns flush-trace 
exec nam lab3.nam &
close $nf
close $tf
exit 0 
} 
$ns at 0.1 "$cbr1 start" 
$ns at 0.2 "$ftp0 start" 
$ns at 9.5 “$cbr1 stop"
$ns at 9.5 “$ ftp0 stop"
$ns at 10.0 "finish"
$ns run

AWK Script (lab3.awk)


BEGIN{
tcp=0; 
udp=0; 
} 
{ 
if($1=="r"&&$3=="2"&&$4=="3"&& $5=="tcp") 
tcp++; 
if($1=="r"&&$3=="2"&&$4=="3"&&$5=="cbr") 
udp++; 
} 
END{
printf("\n Total number of packets sent by TCP : %d\n",tcp); 
printf("\n Total number of packets sent by UDP : %d\n",udp); 
} 
